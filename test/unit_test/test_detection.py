__author__ = 'Angeall'
import unittest
from src.utils.detection import *
import random


class DetectionTestCase(unittest.TestCase):
    def setUp(self):
        def create_connect4():
            connect4 = []
            current_x = 0
            current_y = 0
            x_dist = 65
            y_dist = 55
            for i in range(6):
                for i in range(7):
                    error_x = random.random() * 10
                    error_y = random.random() * 8
                    connect4.append((current_x + error_x, current_y + error_y))
                    current_x += x_dist
                current_y += y_dist
                current_x = 0
            random.shuffle(connect4)
            return connect4

        # Almost perfect Connect 4 (no circle missing, no noise)
        self.circles = [(69.564593919157, 220.460199640106), (5.816927563485698, 170.35369997644142),
                        (325.4743645170645, 58.85697181260877), (202.23210977492113, 117.99819406584858),
                        (328.85160643156604, 1.0077235988391493), (3.029849244081838, 2.2850078339426885),
                        (7.114850531089268, 111.17338648080039), (329.0233503875431, 169.97162798950473),
                        (399.750157135183, 110.57380026848236), (9.215756704390031, 281.9869108390031),
                        (326.9658239592276, 112.45212860191774), (198.9468949435946, 220.9893898421675),
                        (66.0097827011303, 3.8899497775144054), (261.2250351153653, 227.01158967582495),
                        (133.60373319443033, 222.7488881961528), (266.34417180071836, 168.26894178481132),
                        (135.24087139782048, 165.8104330748167), (195.7480441873863, 2.6105928837867536),
                        (74.75317027696299, 167.2157880657985), (196.1221985352397, 59.80645975182558),
                        (265.8612885060237, 7.257832877192755), (399.1464213449372, 56.169350056949),
                        (7.234603490828572, 225.92175799328683), (269.0172844193458, 276.8144215251059),
                        (396.77545480560144, 167.45412057937477), (69.51543966681541, 114.85363483683129),
                        (9.078089246658593, 57.57896536865372), (139.46284704346368, 117.49553769775005),
                        (266.06599137441214, 61.72547801050251), (266.82028035225335, 112.77818193701748),
                        (136.7897692661029, 57.381840185453896), (202.40086359784172, 276.074780842928),
                        (137.67324760066174, 282.07062888489287), (325.92686340385006, 220.49731858904886),
                        (198.4850033901905, 168.9415886266548), (329.0977382267979, 280.6915869630235),
                        (398.2117352953058, 7.629069965876825), (74.65983449601644, 55.774452396265445),
                        (130.35501655176614, 7.069153960598512), (395.34536244706607, 220.394591048149),
                        (74.46338920957228, 281.2908287768117), (393.8036401165491, 279.28507977077055)]
        # """"""""Worst case"""""""""
        # Connect 4 with 3 of the 4 corners missing, some internal circles missing, some internal noise, some external noise
        self.connect4_1 = [(69.564593919157, 220.460199640106), (5.816927563485698, 170.35369997644142),
                           (325.4743645170645, 58.85697181260877), (202.23210977492113, 117.99819406584858),
                           (328.85160643156604, 1.0077235988391493),  # (3.029849244081838, 2.2850078339426885),corner 2
                           (7.114850531089268, 111.17338648080039), (329.0233503875431, 169.97162798950473),
                           (399.750157135183, 110.57380026848236),  # (9.215756704390031, 281.9869108390031), corner 1
                           (326.9658239592276, 112.45212860191774), (198.9468949435946, 220.9893898421675),
                           # (66.0097827011303, 3.8899497775144054), (261.2250351153653, 227.01158967582495),
                           (133.60373319443033, 222.7488881961528), (266.34417180071836, 168.26894178481132),
                           (135.24087139782048, 165.8104330748167), (195.7480441873863, 2.6105928837867536),
                           (74.75317027696299, 167.2157880657985),  # (196.1221985352397, 59.80645975182558),
                           (265.8612885060237, 7.257832877192755), (399.1464213449372, 56.169350056949),
                           # (7.234603490828572, 225.92175799328683), (269.0172844193458, 276.8144215251059),
                           (396.77545480560144, 167.45412057937477),  # (69.51543966681541, 114.85363483683129),
                           (9.078089246658593, 57.57896536865372), (139.46284704346368, 117.49553769775005),
                           (266.06599137441214, 61.72547801050251),  # (266.82028035225335, 112.77818193701748),
                           (136.7897692661029, 57.381840185453896), (202.40086359784172, 276.074780842928),
                           (137.67324760066174, 282.07062888489287),  # (325.92686340385006, 220.49731858904886),
                           (198.4850033901905, 168.9415886266548), (329.0977382267979, 280.6915869630235),
                           (74.65983449601644, 55.774452396265445),  # (398.2117352953058, 7.629069965876825), corner 3
                           (130.35501655176614, 7.069153960598512), (395.34536244706607, 220.394591048149),
                           (74.46338920957228, 281.2908287768117),  # (393.8036401165491, 279.28507977077055)]
                           # Noise Goes Here
                           (250.5477833468543, 60.76984968398586), (185.5457457282682, 200.08685858993859),
                           (4.536973469735968, 76.349583498534509), (348.5498450685069840, 15.94824248594889340),
                           (465.04850208450824, 165.9485398539598), (460.3490360964309643, 335.9898285843989438),
                           (70.9498349834589, 340.3454673247267), (200.2336146736588, 200.0248530844380)]

    def test_vectorize1(self):
        expected = (5.55, 6.56)
        v1 = (18.2, 60.74)
        v2 = (23.75, 67.3)
        result = vectorize(v1, v2)
        self.assertAlmostEqual(expected[0], result[0])
        self.assertAlmostEqual(expected[1], result[1])

    def test_vectorize2(self):
        expected = (5.55, -4.36)
        v1 = (18.2, 60.74)
        v2 = (23.75, 56.38)
        result = vectorize(v1, v2)
        self.assertAlmostEqual(expected[0], result[0])
        self.assertAlmostEqual(expected[1], result[1])

    def test_vectorize3(self):
        expected = (-3.45, 6.56)
        v1 = (18.2, 60.74)
        v2 = (14.75, 67.3)
        result = vectorize(v1, v2)
        self.assertAlmostEqual(expected[0], result[0])
        self.assertAlmostEqual(expected[1], result[1])

    def test_vectorize4(self):
        expected = (-3.0, -7.9)
        v1 = (18.2, 60.74)
        v2 = (15.2, 52.84)
        result = vectorize(v1, v2)
        self.assertAlmostEqual(expected[0], result[0])
        self.assertAlmostEqual(expected[1], result[1])
